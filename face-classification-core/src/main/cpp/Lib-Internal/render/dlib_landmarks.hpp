#pragma once

#include <opencv2/core/core.hpp>
#include <array>
#include <iterator>

namespace dlib_landmarks {
    constexpr auto mean_size = 71;
    constexpr std::array<float,2> mean_raw[] = {
        // outline
        {-1.16514f,  0.0751629f},    // [0]
        {-1.15439f,  0.373676f},
        {-1.12313f,  0.669951f},
        {-1.06725f,  0.960018f},
        {-0.958354f, 1.22761f},
        {-0.782035f, 1.45613f},
        {-0.550843f, 1.64045f},
        {-0.29112f,  1.78431f},
        {0,          1.84993f},      // [8] chin
        {0.29112f,   1.78431f},
        {0.550843f,  1.64045f},
        {0.782035f,  1.45613f},
        {0.958354f,  1.22761f},
        {1.06725f,   0.960018f},
        {1.12313f,   0.669951f},
        {1.15439f,   0.373676f},
        {1.16514f,   0.0751629f},    // [16]

        // eyebrows
        {-0.931911f, -0.203294f},    // [17]
        {-0.797501f, -0.350152f},
        {-0.593888f, -0.408818f},
        {-0.37912f,  -0.387248f},
        {-0.17899f,  -0.309776f},    // [21]

        {0.17899f,   -0.309776f},    // [22]
        {0.37912f,   -0.387248f},
        {0.593888f,  -0.408818f},
        {0.797501f,  -0.350152f},
        {0.931911f,  -0.203294f},    // [26]

        // nose
        {0,          -0.0690838f},   // [27]
        {0,           0.105861f},
        {0,           0.279231f},
        {0,           0.490936f},    // [30] tip

        {-0.262366f,  0.651761f},
        {-0.123331f,  0.660296f},
        { 0,          0.70106f},     // [33] base
        { 0.123331f,  0.660296f},
        { 0.262366f,  0.651761f},

        // eyes
        {-0.685283f, -0.00179737f},  // [36] outer corner
        {-0.572353f, -0.0757509f},
        {-0.430527f, -0.0773551f},
        {-0.314717f,  0.00179737f},  // [39] inner corner
        {-0.434956f,  0.0359331f},
        {-0.577113f,  0.0375892f},

        {0.314717f,   0.00179737f},  // [42] inner corner
        {0.430527f,  -0.0773551f},
        {0.572353f,  -0.0757509f},
        {0.685283f,  -0.00179737f},  // [45] outer corner
        {0.577113f,   0.0375892f},
        {0.434956f,   0.0359331f},

        // mouth
        {-0.424168f,  1.04528f},     // [48] corner
        {-0.283797f,  0.947581f},
        {-0.116541f,  0.89887f},
        { 0,          0.907416f},    // [51] top
        { 0.116541f,  0.898869f},
        { 0.283797f,  0.947581f},
        { 0.424168f,  1.04528f},     // [54] corner
        { 0.286469f,  1.18415f},
        { 0.125248f,  1.24572f},
        { 0,          1.25965f},     // [57] bottom
        {-0.125248f,  1.24572f},
        {-0.286469f,  1.18415f},

        {-0.368267f,  1.04739f},     // [60] corner
        {-0.117573f,  1.01161f},
        { 0,          1.00981f},     // [62] top
        { 0.117573f,  1.01161f},
        { 0.368267f,  1.04739f},     // [64] corner
        { 0.119081f,  1.08952f},
        { 0,          1.1213f},      // [66] bottom
        {-0.119081f,  1.08952f},

        // forehead
        {-0.506818f, -1.03116f},
        { 0,         -1.13795f},
        { 0.506818f, -1.03116f},
    };
    static_assert(std::size(mean_raw) == mean_size,
                  "array has wrong size");
    static_assert(sizeof(cv::Point2f) == sizeof(std::array<float,2>),
                  "cv::Point2f has wrong size");
    const auto mean = reinterpret_cast<const cv::Point2f*>(mean_raw);

    void inplace_push_forehead(std::vector<cv::Point>& pts);
    void inplace_push_border(std::vector<cv::Point>& pts);
}
